#! /usr/bin/python

import argparse
import allel
import numpy as np
import xpclr
import h5py
import pandas as pd
import os


# FUNCTIONS
def load_hdf5_data(hdf5_fn, chrom, s1, s2, gdistkey=None):

    samples = h5py.File(hdf5_fn)[chrom]["samples"][:]
    sample_name = [sid.decode() for sid in samples.tolist()]

    idx1 = np.array([sample_name.index(sid) for sid in s1])
    idx2 = np.array([sample_name.index(sid) for sid in s2])
    h5fh = h5py.File(hdf5_fn)[chrom]

    g = allel.GenotypeChunkedArray(h5fh["calldata"]["genotype"])

    pos = allel.SortedIndex(h5fh["variants"]["POS"][:])
    if gdistkey is not None:
        gdist = h5fh["variants"]["POS"][:]
    else:
        gdist = None

    return g.take(idx1, axis=1), g.take(idx2, axis=1), pos, gdist


def load_text_format_data(mapfn, pop_a_fn, pop_b_fn):

    tbl = pd.read_csv(mapfn, sep=" ",
                      names=["ID", "CHROM", "GDist", "POS", "REF", "ALT"])

    vartbl = allel.VariantChunkedTable(tbl.to_records(), index="POS")

    d1 = np.loadtxt(pop_a_fn, dtype="int8")
    geno1 = allel.GenotypeChunkedArray(d1.reshape((d1.shape[0], -1, 2)))

    d2 = np.loadtxt(pop_b_fn, dtype="int8")
    geno2 = allel.GenotypeChunkedArray(d2.reshape((d2.shape[0], -1, 2)))

    return geno1, geno2, allel.SortedIndex(vartbl.POS[:]), vartbl.GDist[:]


def tabulate_results(chrom, model_li, null_li, selectionc,
                     counts, count_avail, windows, edges):

    lidf = pd.DataFrame(np.vstack((model_li, null_li, selectionc, counts, count_avail)).T,
                        columns=["modelL", "nullL", "sel_coef", "nSNPs", "nSNPs_avail"])

    # these are the nominal windows
    winf = pd.DataFrame(windows, columns=["start", "stop"])

    # these are the "real" windows. Gives a guide to how close we are.
    realf = pd.DataFrame(edges, columns=["pos_start", "pos_stop"])

    out = pd.concat([winf, realf, lidf], axis=1)

    out["xpclr"] = 2 * (out.modelL - out.nullL)
    out["xpclr_norm"] = (out.xpclr - np.nanmean(out.xpclr))/np.nanstd(out.xpclr)

    out.insert(0, "chrom", np.repeat(chrom, len(out)))

    string_id = ["{0}_{1:08d}_{2:08d}".format(r.chrom, r.start, r.stop)
                 for i, r in out.iterrows()]
    out.insert(0, "id", string_id)

    return out


# Argument parsing
psr = argparse.ArgumentParser(
    description='Tool to calculate XP-CLR as per Chen, Patterson, Reich 2010')

# files:
psr.add_argument('--out', "-O", required=True, help='output file')

# data inputs for hdf5 format:
psr.add_argument('--hdf5', "-I", required=False, help='input hdf5 filestem',
                 default=None, action='store')

psr.add_argument('--gdisthdf5', required=False, default=None, type=str,
                 help='key for genetic position in variants table of hdf5')

psr.add_argument('--samplesA', '-Sa', action='store', default=None,
                 dest='samplesA', required=False,
                 help='Which samples comprise population A. Comma separated')

psr.add_argument('--samplesB', '-Sb', action='store', default=None,
                 dest='samplesB', required=False,
                 help='Which samples comprise population B. Comma separated')

psr.add_argument('--rrate', '-R', dest='rrate', action='store',
                 default=1e-8, help='recombination rate per base')


# data inputs for text format
psr.add_argument('--map', required=False, default=None, action='store',
                 help='input map file as per XPCLR specs')

psr.add_argument('--popA', required=False, default=None, action='store',
                 help='filepath to population A genotypes')

psr.add_argument('--popB', required=False, default=None, action='store',
                 help='filepath to population A genotypes')

# chrom
psr.add_argument('--chr', '-C', required=True, dest='chrom', action='store',
                 help='Which contig analysis is based on')

# parameters
psr.add_argument('--ld', '-L', dest='ldcutoff', action='store',
                 default=0.95, help='LD cutoff to apply for weighting')

psr.add_argument('--phased', '-P', dest='phased', action='store_true',
                 help='whether data is phased for more precise r2 calculation')

psr.add_argument('--verbose', '-V', dest='verbose', action='store_true',
                 help='whether to be verbose')

psr.add_argument('--maxsnps', '-M', dest='maxsnps', action='store',
                 default=200, help='max SNPs in a window')
psr.add_argument('--minsnps', '-N', dest='minsnps', action='store',
                 default=10, help='min SNPs in a window')

psr.add_argument('--size', dest='size', action='store',
                 default=20000, help='window size', type=int)
psr.add_argument('--start', dest='start', action='store', type=int,
                 default=1, help='start base position for windows')
psr.add_argument('--stop', dest='stop', action='store', default=None, type=int,
                 help='stop base position for windows')
psr.add_argument('--step', dest='step', action='store', default=20000, type=int,
                 help='windows step for slide')

args = psr.parse_args()


fn = args.out
outdir = os.path.dirname(fn)

assert os.access(outdir, os.W_OK), \
    "No permission to write in the specified directory: {0}".format(outdir)

print("xpclr v{0}".format(xpclr.__version__))
chromosome = args.chrom

# if mode is "hdf5"
if args.hdf5 is not None:

    samples1 = [sample_id.strip() for sample_id in args.samplesA.split(",")]
    samples2 = [sample_id.strip() for sample_id in args.samplesB.split(",")]

    g1, g2, positions, genetic_dist = load_hdf5_data(args.hdf5.strip(),
                                                     chromosome,
                                                     samples1, samples2,
                                                     gdistkey=args.gdisthdf5)

else:
    # else if mode is text
    g1, g2, positions, genetic_dist = load_text_format_data(args.map,
                                                            args.popA,
                                                            args.popB)


ac1 = g1.count_alleles()
ac2 = g2.count_alleles()

print("TOTAL:     {0} SNPs are in the provided input files".format(g1.shape[0]))
multiallelic = (ac1[:, 2:].sum(1) > 0) | (ac2[:, 2:].sum(1) > 0)
print("EXCLUDING: {0} SNPs as multiallelic ".format(multiallelic.sum()))

# all missing in either
missing = (np.array(ac1.sum(1)) == 0) | (np.array(ac2.sum(1)) == 0)
print("EXCLUDING: {0} SNPs as missing in all samples in a population"
      .format(np.sum(missing & ~multiallelic)))

# drop if fixed in AC2,
fixed_p2 = ac2.is_non_segregating()[:] | \
    ac2.is_singleton(0)[:] | \
    ac2.is_singleton(1)[:]
print("EXCLUDING: {0} SNPs as invariant or singleton in population 2"
      .format(np.sum(fixed_p2 & ~missing & ~multiallelic)))

# now compress all!
include = (~multiallelic & ~fixed_p2 & ~missing)
print("TOTAL:     {0} SNPs included in the analysis".format(include.sum()))

g1 = g1.compress(include, axis=0)
g2 = g2.compress(include, axis=0)
positions = np.compress(include, positions, axis=0)
if genetic_dist is not None:
    genetic_dist = np.compress(include, genetic_dist, axis=0)
print("..done dropping above SNPs from analysis.")

# check everything is as expected.
assert g1.shape[0] == g2.shape[0] == positions.shape[0]

# determine windows
if args.stop is None:
    args.stop = positions[-1]
spacing = np.arange(args.start, args.stop, args.step)
scan_windows = np.vstack([spacing, spacing - 1 + args.size]).T

# main function
modelL, nullL, selcoef, nsnps, navail, snpedges = \
    xpclr.xpclr_scan(g1, g2, positions, scan_windows, geneticd=genetic_dist,
                     ldcutoff=args.ldcutoff, phased=args.phased,
                     maxsnps=args.maxsnps, minsnps=args.minsnps,
                     rrate=args.rrate, verbose=args.verbose)

df = tabulate_results(chromosome, modelL, nullL, selcoef,
                      nsnps, navail, scan_windows, snpedges)

df.to_csv(fn, sep="\t", index=False)